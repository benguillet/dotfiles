#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Editors
alias v='vim'
alias a='atom'
alias s='subl .'

# Git
alias gst='git status'
alias gsb='git status -s'
alias gb='git branch'

# Misc aliases
alias fs='foreman start'
alias rc='rails console'
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias yolo='git commit -am "#YOLO" && git push -f origin master'
alias wn='echo "\n\n\n\n\n\n\n\n"'

# Turn off the special expansion of zsh for rake (hard brackets issue)
alias rake='noglob rake'
alias be='bundle exec'
alias cdev='bundle exec cucumber --tags @dev'

# Tmux
alias tma='tmux attach -d -t'
alias tmn='tmux new -s'
alias tml='tmux list-sessions'
alias tmk='tmux kill-session -t'
alias tmr='tmux rename-session -t'
alias tmux='TERM=screen-256color-bce tmux'

alias lighty.start='lighttpd -f $HOME/.lighttpd.conf'
alias lighty.stop='killall lighttpd'
alias mongo.start='mongod --config /usr/local/etc/mongod.conf'
alias mysql.start='mysql.server start'
alias mysql.stop='mysql.server stop'
alias redis.start='redis-server /usr/local/etc/redis.conf'
alias memcached.start='memcached -vvv'
alias memcached.stop='killall memcached'
alias sound.restart="sudo kill -9 `ps ax | grep 'coreaudio[a-z]' | awk '{print $1}'`"

# Redshift Access
alias gnoob="psql postgres://${REDSHIFT_PROD_USER}:${REDSHIFT_PROD_PW}@${REDSHIFT_PROD_SERVER}:${REDSHIFT_PROD_PORT}/${REDSHIFT_PROD_NAME}" 

# Get external IP
alias ifconfig-ext='curl ifconfig.me'

# Autojump
[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh

# Docker cleanup helpers
docker_cleanup_containers() {
  CONTAINERS=docker ps -q -a --filter "status=exited" 2>/dev/null
  TODAY=`date`
  if [ ! -z "$CONTAINERS" ]; then
    printf "=== [%s] Cleaning unused docker containers.\n" "$TODAY"
    docker rm $CONTAINERS
  else
    printf "=== [%s] No unused containers found, not cleaning.\n" "$TODAY"
  fi
}

docker_cleanup_images() {
  IMAGES=docker images -f "dangling=true" -q 2>/dev/null
  TODAY=`date`
  if [ ! -z "$IMAGES" ]; then
    printf "=== [%s] Cleaning unused docker images.\n" "$TODAY"
    docker rmi $IMAGES
  else
    printf "=== [%s] No unused images found, not cleaning.\n" "$TODAY"
  fi
}